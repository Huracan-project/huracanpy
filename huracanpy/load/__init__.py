"""Huracanpy module for loading tracks data"""__all__ = [    "_csv",    "_TRACK",    "_netcdf",]from . import _csvfrom . import _TRACKfrom . import _netcdffrom .. import utilsdef load(filename, tracker=None, add_info=False, **kwargs):    # If tracker is not given, try to derive the right function from the file extension    if tracker is None:        if filename.split(".")[-1] == "csv":            data = _csv.load(filename)        elif filename.split(".")[-1] == "nc":            data = _netcdf.load(filename, **kwargs)        else:            raise ValueError(f"{tracker} is set to None and file type is not detected")    # If tracker is given, use the relevant function    else:        if tracker.lower() == "track":            data = _TRACK.load(filename, **kwargs)        elif tracker.lower() in ["csv", "te", "tempestextremes", "uz"]:            data = _csv.load(filename)        elif tracker.lower() == "ibtracs":            data = _csv.load(                filename,                read_csv_kws=dict(                    header=0,                    skiprows=[1],                    na_values=["", " "],                    converters={                        "SID": str,                        "SEASON": int,                        "BASIN": str,                        "SUBBASIN": str,                        "LON": float,                        "LAT": float,                    },                ),            )        else:            raise ValueError(f"Tracker {tracker} unsupported or misspelled")    if add_info:  # TODO : Manage potentially different variable names        data["hemisphere"] = utils.geography.get_hemisphere(data.lat)        data["basin"] = utils.geography.get_basin(data.lon, data.lat)        data["season"] = utils.time.get_season(data.track_id, data.lat, data.time)        if "wind10" in list(data.keys()):  # If 'wind10' is in the attributes            data["sshs"] = utils.category.get_sshs_cat(data.wind10)        if "slp" in list(data.keys()):  # If 'slp' is in the attributes            data["pres_cat"] = utils.category.get_pressure_cat(data.slp)    return data