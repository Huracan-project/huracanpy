"""Utils related to geographical attributes"""import numpy as npimport xarray as xrimport pandas as pdfrom shapely.geometry import Polygon, MultiPolygon, Pointimport geopandas as gpdfrom ._basins import basins_defdef get_hemisphere(tracks):    """    Function to detect which hemisphere each point corresponds to    Parameters    ----------    tracks : xr.Dataset        tracks dataset obtained with the `load`function.    Returns    -------    xarray.DataArray        The hemisphere series.         You can append it to your tracks by running tracks["hemisphere"] = get_hemisphere(tracks)    """        H = np.where(tracks.lat >= 0, "N", "S")    return xr.DataArray(H, dims = "obs", coords = {"obs":tracks.obs})def get_basin(tracks, convention = "WMO"):    """    Function to determine the basin of each point, according to the selected convention.    Parameters    ----------    tracks : xr.Dataset        tracks dataset obtained with the `load`function.    convention : str        Name of the basin convention you want to use.             * WMO     Returns    -------    xarray.DataArray        The basin series.         You can append it to your tracks by running tracks["basin"] = get_basin(tracks)    """        B = basins_def[convention] # Select GeoDataFrame for the convention    points = pd.DataFrame(dict(coords = list(zip(tracks.lon.values, tracks.lat.values)))) # Create dataframe of points coordinates    points = gpd.GeoDataFrame(points.coords.apply(Point), geometry="coords", crs=B.crs) # Transform into Points within a GeoDataFrame    basin = gpd.tools.sjoin(points, B, how="left" # Identify basins                            ).reset_index().groupby("index").first( # Deal with points at borders                            ).index_right # Select basin names    return xr.DataArray(basin, dims = "obs", coords = {"obs":tracks.obs})